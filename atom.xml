<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布吉的网络日志</title>
  
  <subtitle>记录从这一刻开始</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yulang.xyz/"/>
  <updated>2019-05-24T12:23:18.061Z</updated>
  <id>https://yulang.xyz/</id>
  
  <author>
    <name>布吉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP的结构</title>
    <link href="https://yulang.xyz/2019/05/24/HTTP%E7%9A%84%E7%BB%93%E6%9E%84/"/>
    <id>https://yulang.xyz/2019/05/24/HTTP的结构/</id>
    <published>2019-05-24T12:21:56.000Z</published>
    <updated>2019-05-24T12:23:18.061Z</updated>
    
    <content type="html"><![CDATA[<ol><li>HTTP结构图</li></ol><h2 id><a href="#" class="headerlink" title></a><img src="https://oscimg.oschina.net/oscnet/fc18d7c82cb0811cd1fc043650e060c9cc9.jpg" alt="HTTP结构图" title="HTTP结构图"></h2><ol start="2"><li>HTTP结构之请求篇</li></ol><p><img src="https://oscimg.oschina.net/oscnet/c1e3fde69a1a96de96f3bf994628868db2e.jpg" alt="HTTP请求报文结构" title="HTTP请求报文结构"></p><h6 id="1-组成"><a href="#1-组成" class="headerlink" title="(1)组成"></a><strong>(1)组成</strong></h6><p>http请求报文由三部分组成，分别是：请求行(请求头)、消息报头、请求正文。</p><ul><li>请求头（请求行）以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：<code>Method Request-URI HTTP-Version CRLF</code><br>其中 Method表示请求方法；Request-URI是一个统一资源标识符；HTTP-Version表示请求的HTTP协议版本；CRLF表示回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。请求方法如下：</li></ul><p><img src="https://oscimg.oschina.net/oscnet/e07e9fde828df73fe4d1d04546fa11857d2.jpg" alt></p><ul><li>请求正文(实体主体)：一般不用<h6 id="2-请求报文的例子"><a href="#2-请求报文的例子" class="headerlink" title="(2)请求报文的例子"></a><strong>(2)请求报文的例子</strong></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /chn/yxsz/index.htm HTTP/1.1 /*请求行使用相对URL*/     </span><br><span class="line">Host:www.tsinghua.edu.cn        /*此行为首部行的开始，给出主机的域名*/ </span><br><span class="line">Connection:close               /*告诉服务器发送完请求的文档可释放连接*/                  </span><br><span class="line">user-Agent:Mozilla/5.0        /*表明用户代理是使用Netscape浏览器*/ </span><br><span class="line">Accept-Language:cn           /*表示用户希望优先得到中文版本的文档*/</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-HTTP请求过程（从URL输入到页面展现发生什么？）"><a href="#3-HTTP请求过程（从URL输入到页面展现发生什么？）" class="headerlink" title="(3)HTTP请求过程（从URL输入到页面展现发生什么？）"></a><strong>(3)HTTP请求过程（从URL输入到页面展现发生什么？）</strong></h6><p>a.域名解析(浏览器通过向 DNS 服务器发送域名，DNS 服务器查询(查询缓存)到与域名相对应的 IP 地址，然后返回给浏览器，浏览器再将 IP 地址打在协议上，同时请求参数也会在协议搭载，然后一并发送给对应的服务器)</p><ul><li>查找浏览器缓存（DNS缓存）</li><li>查找操作系统缓存（如果浏览器缓存没有，浏览器会从hosts文件查找是否有DNS信息）</li><li>查找路由缓存</li><li>查找ISP缓存</li><li>查找ISP缓存ISP 是互联网服务提供商(Internet Service Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求</li><li>根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器.com 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）</li></ul><p>b.发起TCP的3次握手（浏览器获得对应的ip地址后，浏览器与远程<code>Web</code>服务器通过<code>TCP</code>三次握手协商来建立一个<code>TCP/IP</code>连接。）</p><p>c.建立TCP连接后发送HTTP请求报文</p><p>d.服务器处理请求，并返回HTTP响应报文</p><p>e.浏览器解析,渲染,并绘制到网页</p><ul><li>根据 HTML 解析出 DOM 树</li><li>根据 CSS 解析生成 CSS 规则树</li><li>结合 DOM 树和 CSS 规则树，生成渲染树</li><li>根据渲染树计算每一个节点的信息</li><li>根据计算好的信息绘制页面</li></ul><p>f. 断开连接（TCP 四次挥手）</p><hr><ol start="3"><li>HTTP结构之响应篇</li></ol><p><img src="https://oscimg.oschina.net/oscnet/2119a4aa3d9511edc2777b94ea5b971bd96.jpg" alt="HTTP响应报文结构" title="HTTP响应报文结构"></p><h6 id="1-组成-1"><a href="#1-组成-1" class="headerlink" title="(1)组成"></a><strong>(1)组成</strong></h6><p>在接收和解释请求消息后，服务器返回一个HTTP响应消息。HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文</p><ul><li>状态行包括状态码，协议版本，状态码描述;(状态行格式如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP-Version Status-Code Reason-Phrase CRLF</span><br></pre></td></tr></table></figure></li></ul><p>其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述</p><p>a. 1XX（信息响应类，表示接受的请求正在处理）</p><p>b. 2XX（处理成功类，表示请求已被成功接收、理解、接受）</p><h6 id="200-OK-客户端请求成功-，请求被成功处理，服务器会根据不同的请求方法返回结果："><a href="#200-OK-客户端请求成功-，请求被成功处理，服务器会根据不同的请求方法返回结果：" class="headerlink" title="200 OK      //客户端请求成功 ，请求被成功处理，服务器会根据不同的请求方法返回结果："></a>200 OK      //客户端请求成功 ，请求被成功处理，服务器会根据不同的请求方法返回结果：</h6><pre><code>GET：请求的对应资源会作为响应返回。HEAD：请求的对应资源的响应头(entity-header)会作为响应返回,不包括响应体(message-body)POST：返回处理对应请求的结果。</code></pre><h6 id="204-No-Content-该状态码表示服务器接收到的请求已经处理完毕，但是服务器不需要返回响应体-比如，客户端是浏览器的话，发出的请求返回204响应，那么浏览器显示的页面不会发生更新。"><a href="#204-No-Content-该状态码表示服务器接收到的请求已经处理完毕，但是服务器不需要返回响应体-比如，客户端是浏览器的话，发出的请求返回204响应，那么浏览器显示的页面不会发生更新。" class="headerlink" title="204 No Content   //该状态码表示服务器接收到的请求已经处理完毕，但是服务器不需要返回响应体.比如，客户端是浏览器的话，发出的请求返回204响应，那么浏览器显示的页面不会发生更新。"></a>204 No Content   //该状态码表示服务器接收到的请求已经处理完毕，但是服务器不需要返回响应体.比如，客户端是浏览器的话，发出的请求返回204响应，那么浏览器显示的页面不会发生更新。</h6><h6 id="206-Partial-Content-该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。客户端发起的请求，必须在请求头中包含Range字段。服务端响应报文中，必须包含由Content-Range指定范围的实体内容-entity-bodies"><a href="#206-Partial-Content-该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。客户端发起的请求，必须在请求头中包含Range字段。服务端响应报文中，必须包含由Content-Range指定范围的实体内容-entity-bodies" class="headerlink" title="206 Partial Content //该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。客户端发起的请求，必须在请求头中包含Range字段。服务端响应报文中，必须包含由Content-Range指定范围的实体内容(entity-bodies )"></a>206 Partial Content //该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。客户端发起的请求，必须在请求头中包含Range字段。服务端响应报文中，必须包含由Content-Range指定范围的实体内容(entity-bodies )</h6><p>c. 3XX（重定向响应类，表示需要客户端需要进行附加操作）</p><h6 id="301-Moved-Permanently-永久重定向-该状态码表示请求的资源已经被分配了新的URI，并且以后使用资源现在所指的URI。并且根据请求的方法有不同的处理方式："><a href="#301-Moved-Permanently-永久重定向-该状态码表示请求的资源已经被分配了新的URI，并且以后使用资源现在所指的URI。并且根据请求的方法有不同的处理方式：" class="headerlink" title="301 Moved Permanently // 永久重定向  该状态码表示请求的资源已经被分配了新的URI，并且以后使用资源现在所指的URI。并且根据请求的方法有不同的处理方式："></a>301 Moved Permanently // 永久重定向  该状态码表示请求的资源已经被分配了新的URI，并且以后使用资源现在所指的URI。并且根据请求的方法有不同的处理方式：</h6><pre><code>HEAD：必须在响应头部Location字段中指明新的永久性的URI。GET：除了有Location字段以外，还需要在响应体中附上永久性URI的超链接文本。POST：客户端在发送POST请求，受到301响应之后，不应该自动跳转URI，应当让用户确认跳转。</code></pre><h6 id="302-Found-临时重定向，该状态码表示请求的资源已被分配了新的URI，希望用户本次能使用新的URI访问-和301-Moved-Permanently-状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质的。如果，用户把一个URI收藏为书签，302响应是不会像301那样去更新书签。"><a href="#302-Found-临时重定向，该状态码表示请求的资源已被分配了新的URI，希望用户本次能使用新的URI访问-和301-Moved-Permanently-状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质的。如果，用户把一个URI收藏为书签，302响应是不会像301那样去更新书签。" class="headerlink" title="302 Found      // 临时重定向，该状态码表示请求的资源已被分配了新的URI，希望用户本次能使用新的URI访问 和301 Moved Permanently 状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质的。如果，用户把一个URI收藏为书签，302响应是不会像301那样去更新书签。"></a>302 Found      // 临时重定向，该状态码表示请求的资源已被分配了新的URI，希望用户本次能使用新的URI访问 和301 Moved Permanently 状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质的。如果，用户把一个URI收藏为书签，302响应是不会像301那样去更新书签。</h6><h6 id="303-See-Other-临时重定向，该状态码表示由于请求对应的资源存在另一个URI，应使用GET方法定向获取请求的资源。303与302不同之处在于，302是不会改变请求的方法，如果请-求方法是POST的话，重定向的请求也应该是POST。而对于303，使用POST请求的话，重定向的请求应该是GET请求。"><a href="#303-See-Other-临时重定向，该状态码表示由于请求对应的资源存在另一个URI，应使用GET方法定向获取请求的资源。303与302不同之处在于，302是不会改变请求的方法，如果请-求方法是POST的话，重定向的请求也应该是POST。而对于303，使用POST请求的话，重定向的请求应该是GET请求。" class="headerlink" title="303 See Other      //临时重定向，该状态码表示由于请求对应的资源存在另一个URI，应使用GET方法定向获取请求的资源。303与302不同之处在于，302是不会改变请求的方法，如果请 求方法是POST的话，重定向的请求也应该是POST。而对于303，使用POST请求的话，重定向的请求应该是GET请求。"></a>303 See Other      //临时重定向，该状态码表示由于请求对应的资源存在另一个URI，应使用GET方法定向获取请求的资源。303与302不同之处在于，302是不会改变请求的方法，如果请 求方法是POST的话，重定向的请求也应该是POST。而对于303，使用POST请求的话，重定向的请求应该是GET请求。</h6><h6 id="304-Not-Modified-资源找到但是不符合请求条件-该状态码表示客户端发送附带条件请求时，服务器端允许请求访问资源，但未满足条件的情况。304状态码返回时，不包含任何响应的主题部分。附带条件的请求指的是采用GET方法的请求头中包含：If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部。"><a href="#304-Not-Modified-资源找到但是不符合请求条件-该状态码表示客户端发送附带条件请求时，服务器端允许请求访问资源，但未满足条件的情况。304状态码返回时，不包含任何响应的主题部分。附带条件的请求指的是采用GET方法的请求头中包含：If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部。" class="headerlink" title="304 Not Modified   //资源找到但是不符合请求条件  该状态码表示客户端发送附带条件请求时，服务器端允许请求访问资源，但未满足条件的情况。304状态码返回时，不包含任何响应的主题部分。附带条件的请求指的是采用GET方法的请求头中包含：If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部。"></a>304 Not Modified   //资源找到但是不符合请求条件  该状态码表示客户端发送附带条件请求时，服务器端允许请求访问资源，但未满足条件的情况。304状态码返回时，不包含任何响应的主题部分。附带条件的请求指的是采用GET方法的请求头中包含：If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部。</h6><h6 id="307-Temporary-Redirect-临时重定向。该状态码与302和303的有着类似的含义，不同之处在于，307状态码并不会指定客户端要用什么样的请求方法请求重定向地址。-302指定使用原有请求方法，303指定使用GET方法"><a href="#307-Temporary-Redirect-临时重定向。该状态码与302和303的有着类似的含义，不同之处在于，307状态码并不会指定客户端要用什么样的请求方法请求重定向地址。-302指定使用原有请求方法，303指定使用GET方法" class="headerlink" title="307 Temporary Redirect   //临时重定向。该状态码与302和303的有着类似的含义，不同之处在于，307状态码并不会指定客户端要用什么样的请求方法请求重定向地址。(302指定使用原有请求方法，303指定使用GET方法)"></a>307 Temporary Redirect   //临时重定向。该状态码与302和303的有着类似的含义，不同之处在于，307状态码并不会指定客户端要用什么样的请求方法请求重定向地址。(302指定使用原有请求方法，303指定使用GET方法)</h6><p>d. 4XX（客户端错误，请求有语法错误或请求无法实现）</p><h6 id="400-Bad-Request-错误请求-客表示该请求报文中存在语法错误，导致服务器无法理解该请求。客户端需要修改请求的内容后再次发送请求。"><a href="#400-Bad-Request-错误请求-客表示该请求报文中存在语法错误，导致服务器无法理解该请求。客户端需要修改请求的内容后再次发送请求。" class="headerlink" title="400 Bad Request    //错误请求    客表示该请求报文中存在语法错误，导致服务器无法理解该请求。客户端需要修改请求的内容后再次发送请求。"></a>400 Bad Request    //错误请求    客表示该请求报文中存在语法错误，导致服务器无法理解该请求。客户端需要修改请求的内容后再次发送请求。</h6><h6 id="401-Unauthorized-请求未授权-该状态码表示发送的请求需要有通过HTTP认证-Basic认证，Digest认证-的认证信息。返回含有401的响应，必须在头部包含WWW-Authenticate以指明服务器需要哪种方式的认证。"><a href="#401-Unauthorized-请求未授权-该状态码表示发送的请求需要有通过HTTP认证-Basic认证，Digest认证-的认证信息。返回含有401的响应，必须在头部包含WWW-Authenticate以指明服务器需要哪种方式的认证。" class="headerlink" title="401 Unauthorized   //请求未授权   该状态码表示发送的请求需要有通过HTTP认证(Basic认证，Digest认证)的认证信息。返回含有401的响应，必须在头部包含WWW-Authenticate以指明服务器需要哪种方式的认证。"></a>401 Unauthorized   //请求未授权   该状态码表示发送的请求需要有通过HTTP认证(Basic认证，Digest认证)的认证信息。返回含有401的响应，必须在头部包含WWW-Authenticate以指明服务器需要哪种方式的认证。</h6><h6 id="403-Forbidden-拒绝-该状态码表明对请求资源的访问被服务器拒绝了。服务器没有必要给出拒绝的详细理由，但如果想做说明的话，可以在实体的主体部分原因进行描述，这样就能让用户看到了。未获得文件系统的访问权限，访问权限出现某些问题，从未授权的发送源IP地址试图访问等情况都可能发生403响应"><a href="#403-Forbidden-拒绝-该状态码表明对请求资源的访问被服务器拒绝了。服务器没有必要给出拒绝的详细理由，但如果想做说明的话，可以在实体的主体部分原因进行描述，这样就能让用户看到了。未获得文件系统的访问权限，访问权限出现某些问题，从未授权的发送源IP地址试图访问等情况都可能发生403响应" class="headerlink" title="403 Forbidden   //拒绝      该状态码表明对请求资源的访问被服务器拒绝了。服务器没有必要给出拒绝的详细理由，但如果想做说明的话，可以在实体的主体部分原因进行描述，这样就能让用户看到了。未获得文件系统的访问权限，访问权限出现某些问题，从未授权的发送源IP地址试图访问等情况都可能发生403响应"></a>403 Forbidden   //拒绝      该状态码表明对请求资源的访问被服务器拒绝了。服务器没有必要给出拒绝的详细理由，但如果想做说明的话，可以在实体的主体部分原因进行描述，这样就能让用户看到了。未获得文件系统的访问权限，访问权限出现某些问题，从未授权的发送源IP地址试图访问等情况都可能发生403响应</h6><h6 id="404-Not-Found-未找到-该状态码表明服务器上无法找到指定的资源。通常被用于服务器不想透露拒绝请求的原因，或者没有其他的响应可提供。"><a href="#404-Not-Found-未找到-该状态码表明服务器上无法找到指定的资源。通常被用于服务器不想透露拒绝请求的原因，或者没有其他的响应可提供。" class="headerlink" title="404 Not Found   //未找到    该状态码表明服务器上无法找到指定的资源。通常被用于服务器不想透露拒绝请求的原因，或者没有其他的响应可提供。"></a>404 Not Found   //未找到    该状态码表明服务器上无法找到指定的资源。通常被用于服务器不想透露拒绝请求的原因，或者没有其他的响应可提供。</h6><h6 id="405-方法禁用-禁用请求中指定的方法"><a href="#405-方法禁用-禁用请求中指定的方法" class="headerlink" title="405           //方法禁用      禁用请求中指定的方法"></a>405           //方法禁用      禁用请求中指定的方法</h6><p>e. 5XX（服务端错误，服务器处理请求出错<br>）</p><h6 id="500-Internal-Server-Error-服务器内部错误-该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的BUG或某些临时的故障。"><a href="#500-Internal-Server-Error-服务器内部错误-该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的BUG或某些临时的故障。" class="headerlink" title="500 Internal Server Error  //服务器内部错误    该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的BUG或某些临时的故障。"></a>500 Internal Server Error  //服务器内部错误    该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的BUG或某些临时的故障。</h6><h6 id="501-尚未实施-服务器不具备完成请求的功能。-例如，服务器无法识别请求方法时可能会返回此代码。"><a href="#501-尚未实施-服务器不具备完成请求的功能。-例如，服务器无法识别请求方法时可能会返回此代码。" class="headerlink" title="501 //尚未实施        服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。"></a>501 //尚未实施        服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</h6><h6 id="502-错误网关-服务器作为网关或代理，从上游服务器收到无效响应。"><a href="#502-错误网关-服务器作为网关或代理，从上游服务器收到无效响应。" class="headerlink" title="502 //错误网关      服务器作为网关或代理，从上游服务器收到无效响应。"></a>502 //错误网关      服务器作为网关或代理，从上游服务器收到无效响应。</h6><h6 id="503-Service-Unavailable-服务不可用-状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上需要的时间，最好写入Retry-After首部字段再返回给客户端。"><a href="#503-Service-Unavailable-服务不可用-状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上需要的时间，最好写入Retry-After首部字段再返回给客户端。" class="headerlink" title="503  Service Unavailable //服务不可用  状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上需要的时间，最好写入Retry-After首部字段再返回给客户端。"></a>503  Service Unavailable //服务不可用  状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上需要的时间，最好写入Retry-After首部字段再返回给客户端。</h6><h6 id="504-网关超时-服务器作为网关或代理，但是没有及时从上游服务器收到请求"><a href="#504-网关超时-服务器作为网关或代理，但是没有及时从上游服务器收到请求" class="headerlink" title="504 //网关超时     服务器作为网关或代理，但是没有及时从上游服务器收到请求"></a>504 //网关超时     服务器作为网关或代理，但是没有及时从上游服务器收到请求</h6><hr><ol start="3"><li>HTTP结构之消息报文（HTTP协议头）篇<h6 id="1-组成-2"><a href="#1-组成-2" class="headerlink" title="(1)组成"></a><strong>(1)组成</strong></h6>HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行），消息报头（可选），空行（只有CRLF的行），消息正文（可选）组成。<br>HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。<br>每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。</li></ol><ul><li><p>普通报头</p><h6 id="在普通报文头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。"><a href="#在普通报文头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。" class="headerlink" title="在普通报文头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。"></a>在普通报文头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。</h6><h6 id="常用的普通报头"><a href="#常用的普通报头" class="headerlink" title="常用的普通报头"></a>常用的普通报头</h6><h6 id="a-Cache-Control-用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1-0使用的类似的报头域为Pragma。"><a href="#a-Cache-Control-用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1-0使用的类似的报头域为Pragma。" class="headerlink" title="a. Cache-Control:用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。"></a>a. Cache-Control:用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。</h6><h6 id="b-Date-普通报头域表示消息产生的日期和时间"><a href="#b-Date-普通报头域表示消息产生的日期和时间" class="headerlink" title="b. Date:普通报头域表示消息产生的日期和时间"></a>b. Date:普通报头域表示消息产生的日期和时间</h6><h6 id="c-Connection-普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接"><a href="#c-Connection-普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接" class="headerlink" title="c. Connection:普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接"></a>c. Connection:普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接</h6></li><li><p>请求报头</p><h6 id="请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。"><a href="#请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。" class="headerlink" title="请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。"></a>请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。</h6><h6 id="常用的请求报头"><a href="#常用的请求报头" class="headerlink" title="常用的请求报头"></a>常用的请求报头</h6><h6 id="a-Accept"><a href="#a-Accept" class="headerlink" title="a.Accept"></a>a.Accept</h6><p>Accept请求报头域用于指定客户端接受哪些类型的信息。eg：<code>Accept：image/gif，表明客户端希望接受GIF图象格式的源；</code><br><code>Accept：text/html，表明客户端希望接受html文本</code></p><h6 id="b-Accept-Charset"><a href="#b-Accept-Charset" class="headerlink" title="b.Accept-Charset"></a>b.Accept-Charset</h6><p>Accept-Charset请求报头域用于指定客户端接受的字符集。<br>eg：<code>Accept-Charset:iso-8859-1,gb2312</code><br>如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。</p><h6 id="c-Accept-Encoding"><a href="#c-Accept-Encoding" class="headerlink" title="c.Accept-Encoding"></a>c.Accept-Encoding</h6><p>Accept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：<code>Accept-Encoding:gzip,deflate</code><br>如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。</p><h6 id="d-Accept-Language"><a href="#d-Accept-Language" class="headerlink" title="d.Accept-Language"></a>d.Accept-Language</h6><p>Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：<code>Accept-Language:zh-cn</code>如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。</p><h6 id="e-Authorization"><a href="#e-Authorization" class="headerlink" title="e.Authorization"></a>e.Authorization</h6><p>Authorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。</p><h6 id="f-Host（发送请求时，该报头域是必需的）"><a href="#f-Host（发送请求时，该报头域是必需的）" class="headerlink" title="f.Host（发送请求时，该报头域是必需的）"></a>f.Host（发送请求时，该报头域是必需的）</h6><p>Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的，eg：我们在浏览器中输入：<code>http://www.guet.edu.cn/index.html</code>;浏览器发送的请求消息中，就会包含Host请求报头域，如下：<br><code>Host：www.guet.edu.cn</code>此处使用缺省端口号80，若指定了端口号，则变成：<code>Host：www.guet.edu.cn:指定端口号</code></p><h6 id="g-User-Agent"><a href="#g-User-Agent" class="headerlink" title="g.User-Agent"></a>g.User-Agent</h6><p>User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。<br>请求报头举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /form.html HTTP/1.1 (CRLF)</span><br><span class="line">Accept:image/gif,image/x-xbitmap,image/jpeg,application/x-shockwave-flash,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,*/* (CRLF)</span><br><span class="line">Accept-Language:zh-cn (CRLF)</span><br><span class="line">Accept-Encoding:gzip,deflate (CRLF)</span><br><span class="line">If-Modified-Since:Wed,05 Jan 2007 11:21:25 GMT (CRLF)</span><br><span class="line">If-None-Match:W/&quot;80b1a4c018f3c41:8317&quot; (CRLF)</span><br><span class="line">User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0) (CRLF)</span><br><span class="line">Host:www.guet.edu.cn (CRLF)</span><br><span class="line">Connection:Keep-Alive (CRLF)</span><br><span class="line">(CRLF)</span><br></pre></td></tr></table></figure></li><li><p>响应报头</p><h6 id="响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。"><a href="#响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。" class="headerlink" title="响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。"></a>响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。</h6><h6 id="常用的响应报头"><a href="#常用的响应报头" class="headerlink" title="常用的响应报头"></a>常用的响应报头</h6><h6 id="a-Location"><a href="#a-Location" class="headerlink" title="a. Location"></a>a. Location</h6><p>Location响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。</p><h6 id="b-Server"><a href="#b-Server" class="headerlink" title="b.Server"></a>b.Server</h6><p>Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。下面是<br>Server响应报头域的一个例子：<br><code>Server：Apache-Coyote/1.1</code><br><code>WWW-Authenticate</code><br>WWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。<br>eg：<code>WWW-Authenticate:Basic realm=&quot;Basic Auth Test!&quot;</code> //可以看出服务器对请求资源采用的是基本验证机制。</p></li></ul><ul><li>实体报头<h6 id="请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。"><a href="#请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。" class="headerlink" title="请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。"></a>请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。</h6><h6 id="常用的实体报头"><a href="#常用的实体报头" class="headerlink" title="常用的实体报头"></a>常用的实体报头</h6><h6 id="a-Content-Encoding"><a href="#a-Content-Encoding" class="headerlink" title="a. Content-Encoding"></a>a. Content-Encoding</h6>Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，<code>eg：Content-Encoding：gzip</code><h6 id="b-Content-Language"><a href="#b-Content-Language" class="headerlink" title="b. Content-Language"></a>b. Content-Language</h6>Content-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读<br>者。eg：<code>Content-Language:da</code><h6 id="c-Content-Length"><a href="#c-Content-Length" class="headerlink" title="c.Content-Length"></a>c.Content-Length</h6>Content-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。<h6 id="d-Content-Type"><a href="#d-Content-Type" class="headerlink" title="d. Content-Type"></a>d. Content-Type</h6>Content-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。eg：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:text/html;charset=ISO-8859-1</span><br><span class="line">Content-Type:text/html;charset=GB2312</span><br></pre></td></tr></table></figure></li></ul><h6 id="e-Last-Modified"><a href="#e-Last-Modified" class="headerlink" title="e. Last-Modified"></a>e. Last-Modified</h6><p>Last-Modified实体报头域用于指示资源的最后修改日期和时间。</p><h6 id="f-Expires"><a href="#f-Expires" class="headerlink" title="f. Expires"></a>f. Expires</h6><p>Expires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。eg：<code>Expires：Thu，15 Sep 2006 16:23:12 GMT</code><br>HTTP1.1的客户端和缓存必须将其他非法的日期格式（包括0）看作已经过期。eg：为了让浏览器不要缓存页面，我们也可以利用Expires实体报头域，设置为0，jsp中程序如下：<code>response.setDateHeader(&quot;Expires&quot;,&quot;0&quot;);</code></p><hr><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h6><ul><li><a href="https://blog.csdn.net/gueter/article/details/1524447" target="_blank" rel="noopener">https://blog.csdn.net/gueter/article/details/1524447</a></li><li><a href="https://github.com/forthealllight/blog/issues/19" target="_blank" rel="noopener">https://github.com/forthealllight/blog/issues/19</a> </li><li><a href="https://www.cnblogs.com/fundebug/p/what-happens-from-url-to-webpage.html" target="_blank" rel="noopener">https://www.cnblogs.com/fundebug/p/what-happens-from-url-to-webpage.html</a> </li><li><a href="http://www.cnblogs.com/xianyulaodi/p/6547807.html" target="_blank" rel="noopener">http://www.cnblogs.com/xianyulaodi/p/6547807.html</a></li><li><a href="https://my.oschina.net/snowing1990/blog/707165" target="_blank" rel="noopener">https://my.oschina.net/snowing1990/blog/707165</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;HTTP结构图&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/fc18d7c82cb0811cd1fc
      
    
    </summary>
    
      <category term="学习 - 计算机网络" scheme="https://yulang.xyz/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="javaScript" scheme="https://yulang.xyz/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>js:for ...of与 for... in</title>
    <link href="https://yulang.xyz/2019/05/24/for%20...of%E4%B8%8E%20for...%20in/"/>
    <id>https://yulang.xyz/2019/05/24/for ...of与 for... in/</id>
    <published>2019-05-24T03:07:01.000Z</published>
    <updated>2019-05-24T12:23:36.700Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="for…in遍历对象的属性或数组索引（ES5）"><a href="#for…in遍历对象的属性或数组索引（ES5）" class="headerlink" title="for…in遍历对象的属性或数组索引（ES5）"></a><strong>for…in遍历对象的属性或数组索引（ES5）</strong></h4></li></ul><p>eg1:遍历数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> arr)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(index);<span class="comment">// 0 1 2 3</span></span><br><span class="line">            <span class="built_in">console</span>.log(arr[index]);<span class="comment">// a b c d</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>eg2:遍历对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">      name:<span class="string">"Jin"</span>,</span><br><span class="line">      age:<span class="number">11</span>,</span><br><span class="line">      [<span class="built_in">Symbol</span>()]:<span class="number">123</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> obj)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(index);<span class="comment">//name age </span></span><br><span class="line">      <span class="built_in">console</span>.log(obj[index]);<span class="comment">//Jin  11</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>eg3:遍历对象的顺序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">            <span class="string">"49"</span>:<span class="string">"A"</span>,</span><br><span class="line">            <span class="string">"a"</span>:<span class="string">"tt"</span>,</span><br><span class="line">            <span class="string">"5"</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="string">"1"</span>:<span class="string">"ss"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(index);<span class="comment">//1 5 49 a</span></span><br><span class="line">            <span class="built_in">console</span>.log(obj[index])<span class="comment">//ss false A tt</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="for…in的要点："><a href="#for…in的要点：" class="headerlink" title="for…in的要点："></a><strong>for…in的要点</strong>：</h4><h6 id="不支持IE浏览器（IE9以下的）"><a href="#不支持IE浏览器（IE9以下的）" class="headerlink" title="-不支持IE浏览器（IE9以下的）"></a>-不支持IE浏览器（IE9以下的）</h6><h6 id="遍历的顺序可能不是实际的内部顺序-先遍历出整数属性，按照升序-，然后其他属性按照创建时的顺序遍历出来"><a href="#遍历的顺序可能不是实际的内部顺序-先遍历出整数属性，按照升序-，然后其他属性按照创建时的顺序遍历出来" class="headerlink" title="-遍历的顺序可能不是实际的内部顺序(先遍历出整数属性，按照升序)，然后其他属性按照创建时的顺序遍历出来"></a>-遍历的顺序可能不是实际的内部顺序(先遍历出整数属性，按照升序)，然后其他属性按照创建时的顺序遍历出来</h6><h6 id="for-in会遍历数组所有的可枚举属性，包括原型中存在的属性（object-prototype添加的属性）"><a href="#for-in会遍历数组所有的可枚举属性，包括原型中存在的属性（object-prototype添加的属性）" class="headerlink" title="-for in会遍历数组所有的可枚举属性，包括原型中存在的属性（object.prototype添加的属性）"></a>-for in会遍历数组所有的可枚举属性，包括原型中存在的属性（object.prototype添加的属性）</h6><h6 id="for-in一般用于遍历对象属性"><a href="#for-in一般用于遍历对象属性" class="headerlink" title="-for in一般用于遍历对象属性"></a>-for in一般用于遍历对象属性</h6><h6 id="for-in无返回值"><a href="#for-in无返回值" class="headerlink" title="-for in无返回值"></a>-for in无返回值</h6><h6 id="Symbol-作为属性名，该属性不会出现在for…in、循环中"><a href="#Symbol-作为属性名，该属性不会出现在for…in、循环中" class="headerlink" title="-Symbol 作为属性名，该属性不会出现在for…in、循环中"></a>-Symbol 作为属性名，该属性不会出现在for…in、循环中</h6><ul><li><h4 id="for…of可遍历数组，Set-Map-类数组对象-eg-arguments-DOM-NodeList对象，字符串-（ES6）不能遍历对象"><a href="#for…of可遍历数组，Set-Map-类数组对象-eg-arguments-DOM-NodeList对象，字符串-（ES6）不能遍历对象" class="headerlink" title="for…of可遍历数组，Set,Map,类数组对象(eg:arguments,DOM NodeList对象，字符串)（ES6）不能遍历对象"></a><strong>for…of可遍历数组，Set,Map,类数组对象(eg:arguments,DOM NodeList对象，字符串)（ES6）不能遍历对象</strong></h4></li></ul><p>eg1:遍历数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> arr)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(key);<span class="comment">// a b c d</span></span><br><span class="line">           <span class="built_in">console</span>.log(arr[key]); <span class="comment">//undefined undefined undefined undefined</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>eg2:遍历对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">           <span class="string">"49"</span>:<span class="string">"A"</span>,</span><br><span class="line">           <span class="string">"a"</span>:<span class="string">"tt"</span>,</span><br><span class="line">           <span class="string">"5"</span>:<span class="literal">false</span>,</span><br><span class="line">           <span class="string">"1"</span>:<span class="string">"ss"</span>,</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;<span class="comment">//报错</span></span><br><span class="line">           <span class="built_in">console</span>.log(index);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>eg3:for of与Object.keys()遍历对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">           name:<span class="string">"Jin"</span>,</span><br><span class="line">           age:<span class="number">11</span>,</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj))&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(value);<span class="comment">//name age</span></span><br><span class="line">           <span class="built_in">console</span>.log(obj[value]);<span class="comment">//Jin 11</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>eg4:for of与Object.keys()遍历数组索引<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">Object</span>.keys(arr))&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(value);<span class="comment">//0 1 2</span></span><br><span class="line">           <span class="built_in">console</span>.log(arr[value]);<span class="comment">// a b c</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>eg4:for of与Object.entries()遍历索引和值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> [index,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(arr))&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(index);<span class="comment">//0 1 2</span></span><br><span class="line">           <span class="built_in">console</span>.log(value);<span class="comment">//a b c</span></span><br><span class="line">           <span class="built_in">console</span>.log(arr[index]);<span class="comment">//a b c</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>eg5:for of与Object.values()遍历属性值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> [index,value] <span class="keyword">of</span> <span class="built_in">Object</span>.values(arr))&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(index);<span class="comment">//a b c</span></span><br><span class="line">           <span class="built_in">console</span>.log(value);<span class="comment">//undefined undefined undefined</span></span><br><span class="line">           <span class="built_in">console</span>.log(arr[index]);<span class="comment">//undefined undefined undefined</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p><strong>for…of的要点：</strong></p><h6 id="for-of其实遍历的是对象的Symbol-iterator属性，而对象没有该属性"><a href="#for-of其实遍历的是对象的Symbol-iterator属性，而对象没有该属性" class="headerlink" title="-for of其实遍历的是对象的Symbol.iterator属性，而对象没有该属性"></a>-for of其实遍历的是对象的Symbol.iterator属性，而对象没有该属性</h6><h6 id="不会遍历到对象属性和原型属性"><a href="#不会遍历到对象属性和原型属性" class="headerlink" title="-不会遍历到对象属性和原型属性"></a>-不会遍历到对象属性和原型属性</h6><h6 id="如果要遍历对象，可与Object-keys-配合使用"><a href="#如果要遍历对象，可与Object-keys-配合使用" class="headerlink" title="-如果要遍历对象，可与Object.keys()配合使用"></a>-如果要遍历对象，可与Object.keys()配合使用</h6><h6 id="配合Object-entries-输出数组索引和元素值-对象的属性和属性值，但Symbol-属性会忽略"><a href="#配合Object-entries-输出数组索引和元素值-对象的属性和属性值，但Symbol-属性会忽略" class="headerlink" title="-配合Object.entries() 输出数组索引和元素值/对象的属性和属性值，但Symbol()属性会忽略"></a>-配合Object.entries() 输出数组索引和元素值/对象的属性和属性值，但Symbol()属性会忽略</h6><h6 id="配合Object-values-输出数组元素值-对象属性值，"><a href="#配合Object-values-输出数组元素值-对象属性值，" class="headerlink" title="-配合Object.values() 输出数组元素值/对象属性值，"></a>-配合Object.values() 输出数组元素值/对象属性值，</h6><h6 id="一般用于遍历数组或者伪数组"><a href="#一般用于遍历数组或者伪数组" class="headerlink" title="-一般用于遍历数组或者伪数组"></a>-一般用于遍历数组或者伪数组</h6><h6 id="无返回值"><a href="#无返回值" class="headerlink" title="-无返回值"></a>-无返回值</h6><h6 id="Symbol-作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object-keys-、Object-getOwnPropertyNames-、JSON-stringify-返回"><a href="#Symbol-作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object-keys-、Object-getOwnPropertyNames-、JSON-stringify-返回" class="headerlink" title="-Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回"></a>-Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回</h6><ul><li><h4 id="Iterator-遍历器-与for…of"><a href="#Iterator-遍历器-与for…of" class="headerlink" title="Iterator(遍历器)与for…of"></a><strong>Iterator(遍历器)与for…of</strong></h4></li><li><strong>遍历器（Iterator）</strong> 它是一种接口，为各种不同的数据结构（Array,Object,Set,Map）提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</li><li><strong>Iterator 的作用</strong><br>一是为各种数据结构，提供访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令for…of循环，当使用for…of循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。</li><li><strong>Iterator 的遍历过程</strong></li></ul><ol><li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</li><li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</li><li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</li><li>不断调用指针对象的next方法，直到它指向数据结构的结束位置。每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</li></ol><ul><li><p><strong>ES6 规定</strong>，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。</p></li><li><p><strong>原生具备 Iterator 接口的数据结构</strong></p></li></ul><ol><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ol><ul><li>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。</li><li><strong>会默认调用 Iterator 接口场合</strong></li></ul><ol><li>解构赋值</li><li>扩展运算符</li><li>yield*</li><li>for…of</li><li>Array.from()</li><li>Map()</li><li>Set() </li><li>WeakMap()</li><li>WeakSet()（比如new Map([[‘a’,1],[‘b’,2]])）</li><li>Promise.all()</li><li>Promise.race()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;for…in遍历对象的属性或数组索引（ES5）&quot;&gt;&lt;a href=&quot;#for…in遍历对象的属性或数组索引（ES5）&quot; class=&quot;headerlink&quot; title=&quot;for…in遍历对象的属性或数组索引（ES5）&quot;&gt;&lt;/a&gt;&lt;strong&gt;
      
    
    </summary>
    
      <category term="学习 - javaScript" scheme="https://yulang.xyz/categories/%E5%AD%A6%E4%B9%A0-javaScript/"/>
    
    
      <category term="javaScript" scheme="https://yulang.xyz/tags/javaScript/"/>
    
  </entry>
  
</feed>
